#version 430

layout( local_size_x = 1024, local_size_y = 1, local_size_z = 1 ) in;

layout(std140, binding=0) writeonly buffer particlePositions
{
    vec4 Positions[];
};

layout(std140, binding=1) writeonly buffer particleVelocities
{
    vec4 Velocities[];
};

layout(std430, binding=3) buffer particleIndex
{
    uint particleIndices[];
};

layout(std430, binding=4) readonly buffer prefixSum
{
    uint prefixSums[];
};

layout(std430, binding=5) buffer bucketSize
{
    uint bucketSizes[];
};

layout(std140, binding=6) readonly buffer particlePositions_read
{
    vec4 Positions_read[];
};

layout(std140, binding=7) readonly buffer particleVelocities_read
{
    vec4 Velocities_read[];
};


uniform vec3 boundingBoxLow;
uniform vec3 boundingBoxHigh;
uniform uvec3 gridRes;
uniform uint numBoids;


const vec3 diagonal = boundingBoxHigh-boundingBoxLow;

uint flattenCellID(uint x, uint y, uint z) {
    return uint(gridRes.x * gridRes.y * z + gridRes.x * y + x);
}

uvec3 getCellIDfromPos(vec3 pos)
{
    vec3 range = diagonal/gridRes;
    return uvec3((pos-boundingBoxLow)/range);
}

uint getFlatCellIDfromPos(vec3 pos) {
    uvec3 cellID = getCellIDfromPos(pos);
    return flattenCellID(cellID.x, cellID.y, cellID.z);
}

void main(void) {
    uint gid = gl_GlobalInvocationID.x;
    if (gid >= numBoids) {
        return;
    }

    vec3 pos = Positions_read[gid].xyz;
    vec3 vel = Velocities_read[gid].xyz;
    uint cellIdx = getFlatCellIDfromPos(pos);

    uint inBucketIndex = atomicAdd(bucketSizes[cellIdx], -1);
    uint particleIdx = prefixSums[cellIdx]-inBucketIndex;

    Positions[particleIdx].xyz = pos;
    Velocities[particleIdx].xyz = vel;
}