#version 430 core

layout( local_size_x = 1024, local_size_y = 1, local_size_z = 1 ) in;

layout(std140, binding=0) buffer Pos
{
    vec4 Positions[];
};

layout(std430, binding=5) buffer bucketSize
{
    uint bucketSizes[];
};

layout(location=1) uniform vec3 boundingBoxLow;
layout(location=2) uniform vec3 boundingBoxHigh;
layout(location=3) uniform uvec3 gridRes;
layout(location=4) uniform uint numBoids;

const vec3 diagonal = boundingBoxHigh-boundingBoxLow;

uint flattenCellID(uint x, uint y, uint z) {
    return uint(gridRes.x * gridRes.y * z + gridRes.x * y + x);
}

uvec3 getCellIDfromPos(vec3 pos)
{
    vec3 range = diagonal/gridRes;
    return uvec3((pos-boundingBoxLow)/range);
}

uint getFlatCellIDfromPos(vec3 pos) {
    uvec3 cellID = getCellIDfromPos(pos);
    return flattenCellID(cellID.x, cellID.y, cellID.z);
}

void main(void)
{
    uint gid = gl_GlobalInvocationID.x;
    if (gid >= numBoids) {
        return;
    }
    vec3 pos = Positions[gid].xyz;
    uint cellIdx = getFlatCellIDfromPos(pos);
    atomicAdd(bucketSizes[cellIdx], 1);
}