#version 430

layout( local_size_x = 1024, local_size_y = 1, local_size_z = 1 ) in;

layout(std140, binding=0) readonly buffer Pos
{
    vec4 Positions[];
};

layout(std140, binding=1) readonly buffer Vel
{
    vec4 Velocities[];
};

layout(std140, binding=2) buffer Acc
{
    vec4 Accelerations[];
};

layout(std430, binding=4) readonly buffer prefixSum
{
    uint prefixSums[];
};


uniform vec3 boundingBoxLow;
uniform vec3 boundingBoxHigh;
uniform uvec3 gridRes;
uniform int numBoids;

uniform float cohesion_factor;
uniform float separation_range;
uniform float separation_factor;
uniform float alignment_factor;
uniform float boundary_avoidance_factor; 
uniform float view_range; 
// const float cohesion_factor = 0.01;
// const float separation_range = 1.0;
// const float separation_factor = 1.0;
// const float alignment_factor = 0.125;
// const float boundary_avoidance_factor = 0.01;
// const float view_range = 3.0;
vec3 separation_vector = vec3(0.f);
vec3 alignment_vector = vec3(0.f);
vec3 cohesion_vector = vec3(0.f);

uint num_in_range = 0;

vec3 diagonal = boundingBoxHigh-boundingBoxLow;
uint currentParticleIndex;

struct boid_t
{
    vec3 pos;
    vec3 vel;
    vec3 acc;
};

float vecLen (vec3 v)
{
	return sqrt(v.x*v.x + v.y*v.y + v.z*v.z);
}

vec3 normalize (vec3 v)
{
	return v / (vecLen(v)+0.0001);
}

vec3 limit(vec3 v, float limit){
    if (dot(v, v) > limit * limit){
        return normalize(v) * limit;
    }
    return v;
}

boid_t get_boid(uint i) {
    boid_t b;
    b.pos = Positions[i].xyz;
    b.vel = Velocities[i].xyz;
    b.acc = Accelerations[i].xyz;
    return b;
}

vec3 avoidBoundary(vec3 pos) {
    //TODO: Find a better way to do this
    vec3 centeredPos = pos-boundingBoxLow-diagonal/2;
    return -centeredPos;
    // float distanceFromEdge = distance(abs(centeredPos), diagonal/2);
    // return -centeredPos/clamp(distanceFromEdge, 0.001, 1000.0);
}


// For explanation, see http://www.vergenet.net/~conrad/boids/pseudocode.html
vec3 separation(uint gid) {
    vec3 c = vec3(0.f);
    boid_t current_boid = get_boid(gid);
    for (uint i = 1; i < numBoids; i++) {
        uint otherID = (gid+i)%numBoids;
        boid_t other_boid = get_boid(otherID);
        float dist = distance(other_boid.pos, current_boid.pos);
        if (dist < separation_range) {
            c -= (other_boid.pos-current_boid.pos);
        }

    }
    return c*separation_factor;
}

vec3 alignment(uint gid) {
    boid_t current_boid = get_boid(gid);
    vec3 v = current_boid.vel;
    uint num_boids_affecting = 0;
    for (uint i = 1; i < numBoids; i++) {
        uint otherID = (gid+i)%numBoids;
        boid_t other_boid = get_boid(otherID);
        if (distance(other_boid.pos, current_boid.pos) < view_range) {
            v += other_boid.vel;
            num_boids_affecting++;
        }

    }
    if (num_boids_affecting == 0) return vec3(0.f);
    v /= num_boids_affecting;
    return v*alignment_factor;
}

vec3 cohesion(uint gid) {
    boid_t current_boid = get_boid(gid);
    vec3 flock_center = vec3(0.f);
    uint num_boids_affecting = 0;
    for (uint i = 1; i < numBoids; i++) {
        uint otherID = (gid+i)%numBoids;
        boid_t other_boid = get_boid(otherID);
        if (distance(other_boid.pos, current_boid.pos) < view_range) {
            flock_center += other_boid.pos;
            num_boids_affecting++;
        }

    }
    if (num_boids_affecting == 0) return flock_center;
    flock_center /= num_boids_affecting;
    return (flock_center-current_boid.pos)*(cohesion_factor/min(num_boids_affecting, 100));
}

uint flattenCellID(uint x, uint y, uint z) {
    return uint(gridRes.x * gridRes.y * z + gridRes.x * y + x);
}

uvec3 getCellIDfromPos(vec3 pos)
{
    // vec3 diagonal = boundingBoxHigh-boundingBoxLow;
    vec3 range = diagonal/gridRes;
    return uvec3((pos-boundingBoxLow)/range);
    // return flattenCellID(vgridIdx.x, vgridIdx.y, vgridIdx.z);
}

uint getFlatCellIDfromPos(vec3 pos) {
    uvec3 cellID = getCellIDfromPos(pos);
    return flattenCellID(cellID.x, cellID.y, cellID.z);
}

void flock(uint particleID) 
{
    if (currentParticleIndex == particleID) {
        return;
    }

    boid_t current_boid = get_boid(currentParticleIndex);
    boid_t other_boid = get_boid(particleID);
    vec3 otherPos = other_boid.pos;
    float dist = distance(other_boid.pos, current_boid.pos);

    if (dist < view_range) {
        num_in_range++;

        // COHESION
        cohesion_vector += other_boid.pos;

        // ALIGNMENT
        alignment_vector += other_boid.vel;

        // SEPARATION
        if (dist < separation_range) {
            separation_vector -= (other_boid.pos-current_boid.pos);
        }
    }
}

void flockInCell(uint x, uint y, uint z) {
    uint id = flattenCellID(x, y, z);
    // uint id = z * gridRes.x * gridRes.y + y * gridRes.x + x;
    uint start;
    if (id == 0) {
        start = 0;
    } else {
        start = prefixSums[id-1];
    }
    uint end = prefixSums[id];

    if (start == end)
        return;

    for (uint i = start; i < end; ++i)
        flock(i);
}



void main() {
    uint gid = gl_GlobalInvocationID.x;
    if (gid >= numBoids) {
        return;
    }
    
    currentParticleIndex = gid;
    boid_t current_boid = get_boid(currentParticleIndex);

    // vec3 coh = cohesion(gid);
    // vec3 sep = separation(gid);
    // vec3 alig = alignment(gid);
    // current_boid.acc = vec3(0.,0.,0.);
    // current_boid.acc += coh+sep+alig;
    // current_boid.acc += avoidBoundary(current_boid.pos)*boundary_avoidance_factor;

    uint cellID = getFlatCellIDfromPos(current_boid.pos);
    uvec3 boidCellPos = getCellIDfromPos(current_boid.pos);
    for (int zOffset = -1; zOffset <= 1; zOffset++) {
        uint z = boidCellPos.z;
        for (int yOffset = -1; yOffset <= 1; yOffset++) {
            uint y = boidCellPos.y;
            for (int xOffset = -1; xOffset <= 1; xOffset++) {
                uint x = boidCellPos.x;
                flockInCell((x+xOffset+gridRes.x)%gridRes.x,
                            (y+yOffset+gridRes.y)%gridRes.y,
                            (z+zOffset+gridRes.z)%gridRes.z);
            }
        }
    }

    current_boid.acc = vec3(0.f,0.f,0.f);
    current_boid.acc = avoidBoundary(current_boid.pos)*boundary_avoidance_factor;
    if (num_in_range != 0) {
        current_boid.acc += (separation_vector*separation_factor + (cohesion_vector*cohesion_factor + alignment_vector*alignment_factor)/num_in_range);
    }

    /* Other grid-based approach: */
    // uint cellID = getFlatCellIDfromPos(current_boid.pos);

    // uint gridXY = gridRes.x * gridRes.y;
    // uint z = cellID / gridXY;
    // uint znext = (z + 1 + gridRes.z) % gridRes.z;
    // uint zprev = (z - 1 + gridRes.z) % gridRes.z;
    // uint tmpy = cellID - (z * gridXY);
    // uint y = tmpy / gridRes.x;
    // uint ynext = (y + 1 + gridRes.y) % gridRes.y;
    // uint yprev = (y - 1 + gridRes.y) % gridRes.y;
    // uint x = tmpy - y * gridRes.x;
    // uint xnext = (x + 1 + gridRes.x) % gridRes.x;
    // uint xprev = (x - 1 + gridRes.x) % gridRes.x;
    
    // flockInCell(xprev, yprev, zprev);
    // flockInCell(x, yprev, zprev);
    // flockInCell(xnext, yprev, zprev);

    // flockInCell(xprev, y, zprev);
    // flockInCell(x, y, zprev);
    // flockInCell(xnext, y, zprev);

    // flockInCell(xprev, ynext, zprev);
    // flockInCell(x, ynext, zprev);
    // flockInCell(xnext, ynext, zprev);

    // flockInCell(xprev, yprev, z);
    // flockInCell(x, yprev, z);
    // flockInCell(xnext, yprev, z);

    // flockInCell(xprev, y, z);
    // flockInCell(x, y, z);
    // flockInCell(xnext, y, z);

    // flockInCell(xprev, ynext, z);
    // flockInCell(x, ynext, z);
    // flockInCell(xnext, ynext, z);

    // flockInCell(xprev, yprev, znext);
    // flockInCell(x, yprev, znext);
    // flockInCell(xnext, yprev, znext);

    // flockInCell(xprev, y, znext);
    // flockInCell(x, y, znext);
    // flockInCell(xnext, y, znext);

    // flockInCell(xprev, ynext, znext);
    // flockInCell(x, ynext, znext);
    // flockInCell(xnext, ynext, znext);

    // current_boid.acc = vec3(0.f,0.f,0.f);
    // current_boid.acc = avoidBoundary(current_boid.pos)*boundary_avoidance_factor;
    // if (num_in_range != 0) {
    //     current_boid.acc += (separation_vector*separation_factor + (cohesion_vector*cohesion_factor + alignment_vector*alignment_factor)/num_in_range);
    // }

    Accelerations[currentParticleIndex].xyz = current_boid.acc;
    // Accelerations[currentParticleIndex].w = num_in_range;
}
