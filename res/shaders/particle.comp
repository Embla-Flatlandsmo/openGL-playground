#version 430 

layout( local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;

layout(std140, binding=4) buffer Pos
{
    vec4 Positions[];
};

layout(std140, binding=5) buffer Vel
{
    vec4 Velocities[];
};

layout(std140, binding=6) buffer Col
{
    vec4 Colors[];
};

uniform vec3 boundingBoxLow;
uniform vec3 boundingBoxHigh;


const vec3 G = vec3(0.0, -0.1, 0.0);
const float DT = 0.1;

float vecLen (vec3 v)
{
	return sqrt(v.x*v.x + v.y*v.y + v.z*v.z);
}

vec3 normalize (vec3 v)
{
	return v / (vecLen(v)+0.0001);
}

// From https://stackoverflow.com/questions/46637752/pseudo-random-number-generation-on-the-gpu
uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

void main() {
    uint gid = gl_GlobalInvocationID.x;

    vec3 p = Positions[gid].xyz;
    vec3 v = Velocities[gid].xyz;;
    vec3 vp = v;
    // vec3 op = p - boundingBoxHigh+boundingBoxLow;
    // vec3 vp = vec3(abs(v.x)*sign(op.x), abs(v.y)*sign(op.y), abs(v.z)*sign(op.z));
    
    // TODO: Find some way to do this without conditional branching 
    // (I think it's bad for performance?)
    if ((p.x < boundingBoxLow.x) && (v.x < 0.0)) {
        vp.x *= -1;
    } else if ((p.x > boundingBoxHigh.x) && (v.x >= 0.0)) {
        vp.x *= -1;
    }

    if ((p.y < boundingBoxLow.y) && (v.y < 0.0)) {
        vp.y *= -1;
    } else if ((p.y > boundingBoxHigh.y) && (v.y >= 0.0)) {
        vp.y *= -1;
    }

    if ((p.z < boundingBoxLow.z) && (v.z < 0.0)) {
        vp.z *= -1;
    } else if ((p.z > boundingBoxHigh.z) && (v.z >= 0.0)) {
        vp.z *= -1;
    }

    // if (p.x > boundingBoxHigh.x || p.x < boundingBoxLow.x) {
    //     v.x = -1;
    // }
    // if (p.y > boundingBoxHigh.y || p.y < boundingBoxLow.y) {
    //     v.y = -1;
    // }
    // if (p.z > boundingBoxHigh.z || p.z < boundingBoxLow.z) {
    //     v.z = -1;
    // }
    vec3 pp = p + vp*DT;
    
    Positions[gid].xyz = pp;
    Velocities[gid].xyz = vp;
    Colors[gid].xyz = abs(normalize(vp));
}
